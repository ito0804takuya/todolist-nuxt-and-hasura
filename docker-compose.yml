# このymlの書き方のバージョン
version: '3.7'

services:
  # postgres, graphql-engine, data-connector-agentは、hasuraのDocに記載の下記コマンドで落ちてきたものを使用
  # curl https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml -o docker-compose-hasura.yml

  postgres:
    image: postgres:15
    # コンテナが何らかの問題で落ちた場合でも、自動で再起動する
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      TZ: 'Asia/Tokyo'
      POSTGRES_PASSWORD: postgrespassword
    ports:
      - 5432:5432

  graphql-engine:
    image: hasura/graphql-engine:v2.24.1
    ports:
      - 8080:8080
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'

  nuxt:
    # ビルド位置 (Dockerfile位置)
    build: ./packages/nuxt
    volumes:
      # cached: volumeマウントを高速化
      - ./packages/nuxt:/src:cached
      # node_modulesはホスト→コンテナに反映されて欲しくないため、[Volume Trick]を使って隔離する
      - nuxt_node_modules:/src/node_modules
    ports:
      # コンテナ : ホスト
      - 3000:3000
      # hmr(ホットリロード)用のポート
      - 24678:24678
    # 起動後、コンテナを存続させるためにフォアグラウンドプロセスを用意する
    tty: true
    environment:
      - HOST=0.0.0.0
      - port=3000
      # ホットリロードを有効化
      - CHOKIDAR_USEPOLLING=true
    # Nuxt起動
    command: sh -c "yarn && yarn dev"

volumes:
  db_data:
  nuxt_node_modules:
